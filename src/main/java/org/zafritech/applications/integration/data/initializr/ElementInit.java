/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.zafritech.applications.integration.data.initializr;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.zafritech.applications.integration.data.dao.ElementDao;
import org.zafritech.applications.integration.data.domain.Element;
import org.zafritech.applications.integration.data.domain.IntegrationEntity;
import org.zafritech.applications.integration.data.repositories.ElementRepository;
import org.zafritech.applications.integration.data.repositories.IntegrationEntityRepository;
import org.zafritech.core.data.domain.ProjectCompanyRole;
import org.zafritech.core.data.repositories.ProjectCompanyRoleRepository;

/**
 *
 * @author lukes
 */
@Component
public class ElementInit {
    
    @Value("${zafritech.paths.data-dir}")
    private String data_dir;
    
    @Autowired
    private ProjectCompanyRoleRepository projectCompanyRoleRepository;
    
    @Autowired
    private ElementRepository elementRepository;
    
    @Autowired
    private IntegrationEntityRepository integrationEntityRepository;
    
    @Transactional
    public void init() {
        
        String dataFile = data_dir + "initialisation/integration-elements.json";
        
        ObjectMapper mapper = new ObjectMapper();
        
        Element parent;
        
        try {
            
            List<ElementDao> json = Arrays.asList(mapper.readValue(new File(dataFile), ElementDao[].class));
            
            for (ElementDao dao : json) {
                
                IntegrationEntity entity = integrationEntityRepository.findFirstByCompanyCode(dao.getEntity());
                
                if (entity == null) {
                
                    ProjectCompanyRole projectCompanyRole = projectCompanyRoleRepository.findFirstByCompanyCompanyCode(dao.getEntity());
                    entity = new IntegrationEntity(projectCompanyRole.getProject(), projectCompanyRole.getCompany(), dao.getEntity());
                    
                    // Save to obtain autogenerated Id
                    entity = integrationEntityRepository.save(entity);
                    
                    // Set SBS and SortOrder based on Id;
                    entity.setSbs(String.valueOf(entity.getId())); 
                    entity.setSortOrder(entity.getId().intValue()); 
                    
                    entity = integrationEntityRepository.save(entity);
                }
                
                parent = null;
                Element element = new Element(entity.getProject(), dao.getIdentifier(), dao.getName(), entity, parent, dao.getDescription());
                element.setDescription("Element imported from MS Excel interface log."); 
                elementRepository.save(element);
            }
            
        } catch (IOException ex) {
            
            Logger.getLogger(ElementInit.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        addParents();
    }
    
    private void addParents() {
        
        String dataFile = data_dir + "initialisation/integration-elements.json";
        
        ObjectMapper mapper = new ObjectMapper();
        
        Element parent;
        
        try {
            
            List<ElementDao> json = Arrays.asList(mapper.readValue(new File(dataFile), ElementDao[].class));
            
            for (ElementDao dao : json) {
                
                parent = elementRepository.findBySbs(dao.getParent());
                Element element = elementRepository.findBySbs(dao.getIdentifier()); 
                element.setParent(parent); 
                elementRepository.save(element);
            }
            
        } catch (IOException ex) {
            
            Logger.getLogger(ElementInit.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
